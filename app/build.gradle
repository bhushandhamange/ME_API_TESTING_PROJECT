/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

apply plugin: 'java'
// apply plugin: 'application'


group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    

    implementation 'org.seleniumhq.selenium:selenium-java:4.1.0'
    
    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.8.0'


    // Exclude conflicting Google Guava version from WebDriverManager
    // implementation ('io.github.bonigarcia:webdrivermanager:5.1.0') {
    //     exclude group: 'com.google.guava', module: 'guava'
    // }

    implementation 'org.testng:testng:7.3.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    // NOTE: Added to remove the "ERROR StatusLogger Log4j2 could not find a logging implementation. Please add log4j-core to the classpath. Using SimpleLogger to log to the console..." error shown
   
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.2'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.2'
    testImplementation 'io.rest-assured:rest-assured:5.2.0'
    testImplementation 'io.rest-assured:json-schema-validator:4.3.3'
    implementation 'org.json:json:20171018'



    
}

// buildDir = '/tmp/external_build'
// application {
//     // Define the main class for the application.
//     mainClass = 'qtriptest.App'
// }

test {
    useTestNG() {
        useDefaultListeners = true // generates the test report
        includeGroups 'API Tests' //'Login Flow'  //'API Tests'
    }
     afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }

    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'

        // Optionally do:
        showStackTraces = true
	}

    testLogging.showStandardStreams = true
    test.outputs.upToDateWhen {false}

}
// task startScript(type:Exec) {
//     commandLine '../selenium-run.sh'
// }

// run.dependsOn startScript

// test.dependsOn startScript